CREATE OR REPLACE TABLE TIM_WILSON.TIM_WILSON.COMPARE_STRINGS (
      ID INTEGER
    , MASKED_STRING VARCHAR(20)
    , PLAIN_STRING VARCHAR(20)
    , EXPECT VARCHAR(10)
)
;

INSERT INTO TIM_WILSON.TIM_WILSON.COMPARE_STRINGS 
(ID, MASKED_STRING, PLAIN_STRING, EXPECT)
VALUES
(1, '1234XXXXX5', '1234777775', 'TRUE')
, (2, '1234XXXXX4', '1234777774', 'TRUE')
, (3, '1234XXXXXX', '1334777774', 'FALSE')
, (4, 'X234XXXXXX', '1234777774', 'TRUE')
, (5, '9876XXXXX5', '1334777774', 'FALSE')
, (6, '1234*****4', '1234777774', 'TRUE')
, (7, '123XXX5XX4', '1234775774', 'TRUE')
, (8, '321XXX5XX4', '1234775774', 'FALSE')
;

SELECT *
FROM TIM_WILSON.TIM_WILSON.COMPARE_STRINGS 
;

SELECT
REGEXP_SUBSTR_ALL(MASKED_STRING, '.{1}')
FROM TIM_WILSON.TIM_WILSON.COMPARE_STRINGS 
;

SELECT
  REGEXP_SUBSTR_ALL(MASKED_STRING, '.{1}') AS array1
, REGEXP_SUBSTR_ALL(PLAIN_STRING, '.{1}') AS array2
, REGEXP_SUBSTR_ALL(REPLACE(REPLACE(MASKED_STRING, 'X', ''), '*', ''), '.{1}') AS array3
, ARRAY_INTERSECTION(array1, array2) AS overlap
, ARRAY_INTERSECTION(array1, array2) AS overlap1
, ARRAY_INTERSECTION(array2, array1) AS overlap2
, ARRAY_EXCEPT(array1, array2) AS except1
, ARRAY_EXCEPT(array2, array1) AS except2
, ARRAY_TO_STRING(array3, '') = ARRAY_TO_STRING(overlap, '') AS strings_match
, ARRAYS_ZIP(array1, array2)
-- , ARRAY_SORT(ARRAY_INTERSECTION(array1, array2)) AS overlap
-- , ARRAY_TO_STRING(ARRAY_SORT(overlap), '') = ARRAY_TO_STRING(ARRAY_SORT(array3), '') AS equality
-- , ARRAY_SIZE(overlap) = ARRAY_SIZE(array3)
--     AND ARRAY_TO_STRING(ARRAY_SORT(overlap), '') = ARRAY_TO_STRING(ARRAY_SORT(array3), '') AS strings_match
, EXPECT
FROM TIM_WILSON.TIM_WILSON.COMPARE_STRINGS 
;

SELECT *
, REGEXP_SUBSTR_ALL(REPLACE(REPLACE(MASKED_STRING, 'X', '0'), '*', '0'), '.{1}') AS masked_array
, masked_array = array_calc
FROM (
SELECT
  ID
, REGEXP_SUBSTR_ALL(MASKED_STRING, '.{1}') AS array1
, REGEXP_SUBSTR_ALL(PLAIN_STRING, '.{1}') AS array2
, MIN(MASKED_STRING) AS MASKED_STRING
, MIN(PLAIN_STRING) AS PLAIN_STRING
, ARRAY_AGG(
(CASE WHEN array1[n.index] = 'X' OR array1[n.index] = '*' THEN 0 ELSE 1 END * array2[n.index]::INTEGER)::VARCHAR(20)
) WITHIN GROUP(ORDER BY n.index) AS array_calc
FROM TIM_WILSON.TIM_WILSON.COMPARE_STRINGS 
, table(flatten(array1)) n
GROUP BY 1,3,2
)
ORDER BY ID
;

SELECT *
, REGEXP_SUBSTR_ALL(REPLACE(REPLACE(MASKED_STRING, 'X', '0'), '*', '0'), '.{1}') AS masked_array
, masked_array = array_calc
FROM (
SELECT
  ID
, MASKED_STRING
, PLAIN_STRING
, ARRAY_AGG(
(CASE WHEN REGEXP_SUBSTR_ALL(MASKED_STRING, '.{1}')[n.index] IN ('X', '*') THEN 0 ELSE 1 END * REGEXP_SUBSTR_ALL(PLAIN_STRING, '.{1}')[n.index]::INTEGER)::VARCHAR(20)
) WITHIN GROUP(ORDER BY n.index) AS array_calc
FROM TIM_WILSON.TIM_WILSON.COMPARE_STRINGS 
, table(flatten(REGEXP_SUBSTR_ALL(MASKED_STRING, '.{1}'))) n
GROUP BY 1,3,2
)
ORDER BY ID
;

SELECT
  ID
, REGEXP_SUBSTR_ALL(MASKED_STRING, '.{1}') AS array1
, REGEXP_SUBSTR_ALL(PLAIN_STRING, '.{1}') AS array2
-- , n.*
-- , n2.*
, ARRAY_AGG(
(CASE WHEN array1[n.index] = array2[n.index] THEN 1 ELSE 0 END)::VARCHAR(20)
) WITHIN GROUP(ORDER BY n.index) AS array_calc
, SUM(CASE WHEN array1[n.index] = array2[n.index] THEN 1 ELSE 0 END) = ARRAY_SIZE(array_calc)
 = ARRAY_SIZE(array_calc)
FROM TIM_WILSON.TIM_WILSON.COMPARE_STRINGS 
INNER JOIN table(flatten(array1)) n
INNER JOIN table(flatten(array2)) n2
WHERE 1 = 1
-- AND ID = 1
AND n.index = n2.index
AND REGEXP_SUBSTR_ALL(MASKED_STRING, '.{1}')[n.index] NOT IN ('X', '*')
GROUP BY 1,3,2
ORDER BY ID
;


