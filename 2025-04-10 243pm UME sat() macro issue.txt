

-- Generated by AutomateDV (formerly known as dbtvault)

    

WITH source_data AS (
    SELECT a.POLICY_COVER_HK, a.PP_CI_LIFE_COVER_BASIS_HASHDIFF, a.COVER_BASIS, a._PSA_DELETED, a._PSA_SYNCED, a._PSA_VALID_FROM, a._PSA_VALID_TO, a.LOAD_DATETIME, a.EFFECTIVE_FROM, a.LOAD_DATETIME_SRC, a.RECORD_SOURCE
    FROM TIM_WILSON.TIM_WILSON.v_stg_pp_ci_life_cover_basis AS a
    WHERE a.POLICY_COVER_HK IS NOT NULL
),

latest_records AS (
    SELECT current_records.POLICY_COVER_HK, current_records.HASHDIFF, current_records.LOAD_DATETIME_SRC
    FROM TIM_WILSON.TIM_WILSON.hsat_policy_cover_pp_ci_life_cover_basis AS current_records
    JOIN (
        SELECT DISTINCT source_data.POLICY_COVER_HK
        FROM source_data
    ) AS source_records
        ON source_records.POLICY_COVER_HK = current_records.POLICY_COVER_HK
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY current_records.POLICY_COVER_HK
        ORDER BY current_records.LOAD_DATETIME_SRC DESC
    ) = 1
),

unique_source_records AS (
    SELECT
        sd.POLICY_COVER_HK, sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF, sd.COVER_BASIS, sd._PSA_DELETED, sd._PSA_SYNCED, sd._PSA_VALID_FROM, sd._PSA_VALID_TO, sd.LOAD_DATETIME, sd.EFFECTIVE_FROM, sd.LOAD_DATETIME_SRC, sd.RECORD_SOURCE
    FROM source_data AS sd
    LEFT OUTER JOIN latest_records AS lr
        ON sd.POLICY_COVER_HK = lr.POLICY_COVER_HK
-- ???     AND sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF = lr.HASHDIFF

    QUALIFY sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF !=
        LAG(sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF, 1,
            COALESCE(
                lr.HASHDIFF,
                CAST('FFFFFFFF' AS BINARY(16))
            )
        ) OVER (
            PARTITION BY sd.POLICY_COVER_HK
            ORDER BY sd.LOAD_DATETIME_SRC ASC,
                     sd.EFFECTIVE_FROM ASC
        )
        AND sd.LOAD_DATETIME_SRC != lr.LOAD_DATETIME_SRC
)
SELECT * FROM unique_source_records;
,

records_to_insert AS (
    SELECT usr.POLICY_COVER_HK, usr.PP_CI_LIFE_COVER_BASIS_HASHDIFF AS HASHDIFF, usr.COVER_BASIS, usr._PSA_DELETED, usr._PSA_SYNCED, usr._PSA_VALID_FROM, usr._PSA_VALID_TO, usr.LOAD_DATETIME, usr.EFFECTIVE_FROM, usr.LOAD_DATETIME_SRC, usr.RECORD_SOURCE
    FROM unique_source_records AS usr
)

SELECT * FROM records_to_insert
;





-- Generated by AutomateDV (formerly known as dbtvault)

    

WITH source_data AS (
    SELECT a.POLICY_COVER_HK, a.PP_CI_LIFE_COVER_BASIS_HASHDIFF, a.COVER_BASIS, a._PSA_DELETED, a._PSA_SYNCED, a._PSA_VALID_FROM, a._PSA_VALID_TO, a.LOAD_DATETIME, a.EFFECTIVE_FROM, a.LOAD_DATETIME_SRC, a.RECORD_SOURCE
    FROM TIM_WILSON.TIM_WILSON.v_stg_pp_ci_life_cover_basis AS a
    WHERE a.POLICY_COVER_HK IS NOT NULL
),

latest_records AS (
    SELECT current_records.POLICY_COVER_HK, current_records.HASHDIFF, current_records.LOAD_DATETIME_SRC
    FROM TIM_WILSON.TIM_WILSON.hsat_policy_cover_pp_ci_life_cover_basis AS current_records
    JOIN (
        SELECT DISTINCT source_data.POLICY_COVER_HK
        FROM source_data
    ) AS source_records
        ON source_records.POLICY_COVER_HK = current_records.POLICY_COVER_HK
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY current_records.POLICY_COVER_HK
        ORDER BY current_records.LOAD_DATETIME_SRC DESC
    ) = 1
),

unique_source_records AS (
    SELECT
        sd.POLICY_COVER_HK, sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF, sd.COVER_BASIS, sd._PSA_DELETED, sd._PSA_SYNCED, sd._PSA_VALID_FROM, sd._PSA_VALID_TO, sd.LOAD_DATETIME, sd.EFFECTIVE_FROM, sd.LOAD_DATETIME_SRC, sd.RECORD_SOURCE
    FROM source_data AS sd
    LEFT OUTER JOIN latest_records AS lr
        ON sd.POLICY_COVER_HK = lr.POLICY_COVER_HK
        AND sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF = lr.HASHDIFF

    ORDER BY sd.POLICY_COVER_HK, sd.LOAD_DATETIME_SRC, sd.EFFECTIVE_FROM
    
    -- QUALIFY sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF !=
    --     LAG(sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF, 1,
    --         COALESCE(
    --             lr.HASHDIFF,
    --             CAST('FFFFFFFF' AS BINARY(16))
    --         )
    --     ) OVER (
    --         PARTITION BY sd.POLICY_COVER_HK, sd.PP_CI_LIFE_COVER_BASIS_HASHDIFF
    --         ORDER BY sd.LOAD_DATETIME_SRC ASC,
    --                  sd.EFFECTIVE_FROM ASC
    --     )
)
SELECT * FROM unique_source_records;
