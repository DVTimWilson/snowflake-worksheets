ALTER SESSION SET USE_CACHED_RESULT = FALSE
;

SELECT *
FROM AUTOMATE_DV_DEV.TEST_TIM_WILSON.SATELLITE_TZ
;

-- TRUNCATE TABLE AUTOMATE_DV_DEV.TEST_TIM_WILSON.SATELLITE_TZ
-- ;

    -- Generated by AutomateDV (formerly known as dbtvault)

    

WITH source_data AS (
    SELECT a.CUSTOMER_PK, a.HASHDIFF, a.CUSTOMER_NAME, a.CUSTOMER_DOB, a.CUSTOMER_PHONE, a.EFFECTIVE_FROM, a.LOAD_DATE, a.SOURCE
    FROM AUTOMATE_DV_DEV.TEST_TIM_WILSON.STG_CUSTOMER_TZ AS a
    WHERE a.CUSTOMER_PK IS NOT NULL
),

latest_records AS (
    SELECT current_records.CUSTOMER_PK, current_records.HASHDIFF, current_records.LOAD_DATE
    FROM AUTOMATE_DV_DEV.TEST_TIM_WILSON.SATELLITE_TZ AS current_records
    JOIN (
        SELECT DISTINCT source_data.CUSTOMER_PK
        FROM source_data
    ) AS source_records
        ON source_records.CUSTOMER_PK = current_records.CUSTOMER_PK
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY current_records.CUSTOMER_PK
        ORDER BY current_records.LOAD_DATE DESC
    ) = 1
),

-- first_record_in_set AS (
--     SELECT
--         sd.CUSTOMER_PK, sd.HASHDIFF, sd.CUSTOMER_NAME, sd.CUSTOMER_DOB, sd.CUSTOMER_PHONE, sd.EFFECTIVE_FROM, sd.LOAD_DATE, sd.SOURCE
--     FROM source_data AS sd
--     QUALIFY ROW_NUMBER() OVER (
--         PARTITION BY sd.CUSTOMER_PK
--         ORDER BY sd.LOAD_DATE ASC
--     ) = 1
-- ),

-- unique_source_records AS (
--     SELECT DISTINCT
--         sd.CUSTOMER_PK, sd.HASHDIFF, sd.CUSTOMER_NAME, sd.CUSTOMER_DOB, sd.CUSTOMER_PHONE, sd.EFFECTIVE_FROM, sd.LOAD_DATE, sd.SOURCE
--     FROM source_data AS sd
--     QUALIFY sd.HASHDIFF != LAG(sd.HASHDIFF) OVER (
--         PARTITION BY sd.CUSTOMER_PK
--         ORDER BY sd.LOAD_DATE ASC
--     )
-- ),

all_records_in_sets AS (
    SELECT DISTINCT
        sd.CUSTOMER_PK, sd.HASHDIFF, sd.CUSTOMER_NAME, sd.CUSTOMER_DOB, sd.CUSTOMER_PHONE, sd.EFFECTIVE_FROM, sd.LOAD_DATE, sd.SOURCE
    FROM source_data AS sd
    QUALIFY sd.HASHDIFF != LAG(sd.HASHDIFF, 1, ''::BINARY(16)) OVER (
        PARTITION BY sd.CUSTOMER_PK
        ORDER BY sd.LOAD_DATE ASC
    )
),

records_to_insert AS (
    -- SELECT frin.CUSTOMER_PK, frin.HASHDIFF, frin.CUSTOMER_NAME, frin.CUSTOMER_DOB, frin.CUSTOMER_PHONE, frin.EFFECTIVE_FROM, lr.LOAD_DATE, frin.LOAD_DATE, frin.SOURCE
    -- FROM first_record_in_set AS frin
    -- LEFT JOIN latest_records AS lr
    --     ON lr.CUSTOMER_PK = frin.CUSTOMER_PK
    --     AND lr.HASHDIFF = frin.HASHDIFF
    --     WHERE lr.HASHDIFF IS NULL
    -- UNION
    -- SELECT usr.CUSTOMER_PK, usr.HASHDIFF, usr.CUSTOMER_NAME, usr.CUSTOMER_DOB, usr.CUSTOMER_PHONE, usr.EFFECTIVE_FROM, usr.LOAD_DATE, usr.SOURCE
    -- FROM unique_source_records AS usr
    SELECT aris.CUSTOMER_PK, aris.HASHDIFF, aris.CUSTOMER_NAME, aris.CUSTOMER_DOB, aris.CUSTOMER_PHONE, aris.EFFECTIVE_FROM, lr.LOAD_DATE, aris.LOAD_DATE, aris.SOURCE
    FROM all_records_in_sets AS aris
    LEFT JOIN latest_records AS lr
        ON lr.CUSTOMER_PK = aris.CUSTOMER_PK
        AND lr.HASHDIFF = aris.HASHDIFF
        AND lr.LOAD_DATE = aris.LOAD_DATE
    WHERE lr.HASHDIFF IS NULL
)

-- SELECT * FROM latest_records
SELECT * FROM records_to_insert
-- SELECT * FROM all_records_in_sets
;

//
// CUSTOMER_PK	HASHDIFF	CUSTOMER_NAME	CUSTOMER_DOB	CUSTOMER_PHONE	EFFECTIVE_FROM	LOAD_DATE	SOURCE
// B8C37E33DEFDE51CF91E1E03E51657DA	7F671588DEE5586A2CE56AA9BF465247	Albie	1990-02-03	17-214-233-1214	2019-08-06 01:00:00.100 -0700	2019-08-06 01:00:00.100 -0700	*
// B8C37E33DEFDE51CF91E1E03E51657DA	80C18471A45E40CA365A5B7FA1FE5F87	Albert	1990-02-03	17-214-233-1214	2019-08-06 01:00:00.300 -0700	2019-08-06 01:00:00.300 -0700	*// 
//

WITH source_data AS (
    SELECT a.CUSTOMER_PK, a.HASHDIFF, a.CUSTOMER_NAME, a.CUSTOMER_DOB, a.CUSTOMER_PHONE, a.EFFECTIVE_FROM, a.LOAD_DATE, a.SOURCE
    FROM AUTOMATE_DV_DEV.TEST_TIM_WILSON.STG_CUSTOMER_TZ AS a
    WHERE a.CUSTOMER_PK IS NOT NULL
),

latest_records AS (
    SELECT current_records.CUSTOMER_PK, current_records.HASHDIFF, current_records.LOAD_DATE
    FROM AUTOMATE_DV_DEV.TEST_TIM_WILSON.SATELLITE_TZ AS current_records
    JOIN (
        SELECT DISTINCT source_data.CUSTOMER_PK
        FROM source_data
    ) AS source_records
        ON source_records.CUSTOMER_PK = current_records.CUSTOMER_PK
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY current_records.CUSTOMER_PK
        ORDER BY current_records.LOAD_DATE DESC
    ) = 1
),

all_records_in_sets AS (
    SELECT DISTINCT
        sd.CUSTOMER_PK, sd.HASHDIFF, sd.CUSTOMER_NAME, sd.CUSTOMER_DOB, sd.CUSTOMER_PHONE, sd.EFFECTIVE_FROM, sd.LOAD_DATE, sd.SOURCE
    FROM source_data AS sd
    QUALIFY sd.HASHDIFF != LAG(sd.HASHDIFF, 1, ''::BINARY(16)) OVER (
        PARTITION BY sd.CUSTOMER_PK
        ORDER BY sd.LOAD_DATE ASC
    )
),

records_to_insert AS (
    -- UNION for ghost record goes here
    SELECT aris.CUSTOMER_PK, aris.HASHDIFF, aris.CUSTOMER_NAME, aris.CUSTOMER_DOB, aris.CUSTOMER_PHONE, aris.EFFECTIVE_FROM, lr.LOAD_DATE, aris.LOAD_DATE, aris.SOURCE
    FROM all_records_in_sets AS aris
    LEFT JOIN latest_records AS lr
        ON lr.CUSTOMER_PK = aris.CUSTOMER_PK
        AND lr.HASHDIFF = aris.HASHDIFF
        AND lr.LOAD_DATE = aris.LOAD_DATE
    WHERE lr.HASHDIFF IS NULL
)

SELECT * FROM records_to_insert
-- SELECT * FROM all_records_in_sets
;
